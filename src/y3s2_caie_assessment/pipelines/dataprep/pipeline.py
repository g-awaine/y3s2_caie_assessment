from kedro.pipeline import Pipeline, node
from .nodes import *


def create_pipeline(**kwargs) -> Pipeline:
    """
    Creates the data preparation pipeline.
    """
    return Pipeline(
        [
            node(
                func=standardize_cities,
                inputs=["customers_raw", 
                        "params:customers_params.zip_city_col_mapping.city"],
                outputs="customers_standardised_cities",
                name="standardize_customers_city_spelling"
            ),
            node(
                func=drop_duplicate,
                inputs=["geo_raw"],
                outputs="geo_no_dupes",
                name="remove_duplicates_geo"
            ),
            node(
                func=drop_rows_lat_lng,
                inputs=["geo_no_dupes", 
                        "params:geo_params.lat_lng_filter"],
                outputs="geo_clean_lat_lng",
                name="clean_lat_lng_geo"
            ),
            node(
                func=aggregate_by_column,
                inputs=["geo_clean_lat_lng", 
                        "params:geo_params.agg.groupby", 
                        "params:geo_params.agg.func_map"],
                outputs="geo_aggregated",
                name="aggregate_geo"
            ),
            node(
                func=cross_reference_cities,
                inputs=["geo_aggregated", 
                        "customers_raw", 
                        "params:geo_params.zip_city_col_mapping"],
                outputs="geo_city_xref",
                name="cross_reference_geo_cities"
            ),
            node(
                func=standardize_cities,
                inputs=["geo_city_xref", 
                        "params:geo_params.zip_city_col_mapping.city"],
                outputs="geo_standardised_cities",
                name="standardize_geo_city_spelling"
            ),
            node(
                func=drop_rows_missing_values,
                inputs=["products_raw", 
                        "params:products_params.missing.subset", 
                        "params:products_params.missing.how"],
                outputs="products_no_missing",
                name="drop_missing_products"
            ),
            node(
                func=mice_impute_entries,
                inputs=["products_no_missing", 
                        "params:products_params.mice_imputation_config"],
                outputs="products_imputed",
                name="impute_products"
            ),
            node(
                func=drop_columns,
                inputs=["orders_raw", 
                        "params:orders_params.col_to_remove"],
                outputs="orders_clean_cols",
                name="drop_order_columns"
            ),
            node(
                func=drop_erroneous_orders,
                inputs=["orders_clean_cols"],
                outputs="dropped_orders",
                name="drop_erroneous_orders"
            ),
            node(
                func=drop_columns,
                inputs=["reviews_raw", "params:review_params.col_to_remove"],
                outputs="reviews_clean_cols",
                name="drop_review_columns"
            ),
            node(
                func=cross_reference_cities,
                inputs=["sellers_raw", 
                        "customers_raw", 
                        "params:sellers_params.zip_city_col_mapping"],
                outputs="sellers_city_xref",
                name="cross_reference_seller_cities"
            ),
            node(
                func=standardize_cities,
                inputs=["sellers_city_xref", 
                        "params:sellers_params.zip_city_col_mapping.city"],
                outputs="sellers_standardised_cities",
                name="standardize_seller_city_spelling"
            )
        ]
)
